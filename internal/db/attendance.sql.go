// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: attendance.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAttendance = `-- name: CreateAttendance :exec
INSERT INTO attendances ( ID, date_service, start_service, end_service, status, reminder, owner_id, type_service_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateAttendanceParams struct {
  ID            uuid.UUID `json:"id"`
	DateService   time.Time `json:"date_service"`
	StartService  time.Time `json:"start_service"`
	EndService    time.Time `json:"end_service"`
	Status        string    `json:"status"`
	Reminder      int32     `json:"reminder"`
	OwnerID       uuid.UUID `json:"owner_id"`
	TypeServiceID uuid.UUID `json:"type_service_id"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) CreateAttendance(ctx context.Context, arg CreateAttendanceParams) error {
	_, err := q.db.ExecContext(ctx, createAttendance,
		arg.ID,
		arg.DateService,
		arg.StartService,
		arg.EndService,
		arg.Status,
		arg.Reminder,
		arg.OwnerID,
		arg.TypeServiceID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteAttendance = `-- name: DeleteAttendance :exec
DELETE FROM attendances
WHERE attendances.id = $1
AND NOT EXISTS (
    SELECT 1 FROM owners WHERE owner_id = $1
)
AND NOT EXISTS (
    SELECT 1 FROM type_services WHERE type_service_id = $1
)
`

func (q *Queries) DeleteAttendance(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAttendance, id)
	return err
}

const getAttendance = `-- name: GetAttendance :one
SELECT id, date_service, start_service, end_service, status, reminder, owner_id, type_service_id, created_at, updated_at
FROM attendances
WHERE attendances.id = $1
`

func (q *Queries) GetAttendance(ctx context.Context, id uuid.UUID) (Attendance, error) {
	row := q.db.QueryRowContext(ctx, getAttendance, id)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.DateService,
		&i.StartService,
		&i.EndService,
		&i.Status,
		&i.Reminder,
		&i.OwnerID,
		&i.TypeServiceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAttendanceDateService = `-- name: GetAttendanceDateService :one
SELECT id, date_service, start_service, end_service, status, reminder, owner_id, type_service_id, created_at, updated_at
FROM attendances
WHERE attendances.date_service = $1
`

func (q *Queries) GetAttendanceDateService(ctx context.Context, dateService time.Time) (Attendance, error) {
	row := q.db.QueryRowContext(ctx, getAttendanceDateService, dateService)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.DateService,
		&i.StartService,
		&i.EndService,
		&i.Status,
		&i.Reminder,
		&i.OwnerID,
		&i.TypeServiceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAttendances = `-- name: GetAttendances :many
SELECT id, date_service, start_service, end_service, status, reminder, owner_id, type_service_id, created_at, updated_at
FROM attendances
`

func (q *Queries) GetAttendances(ctx context.Context) ([]Attendance, error) {
	rows, err := q.db.QueryContext(ctx, getAttendances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attendance
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.DateService,
			&i.StartService,
			&i.EndService,
			&i.Status,
			&i.Reminder,
			&i.OwnerID,
			&i.TypeServiceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttendance = `-- name: UpdateAttendance :exec
UPDATE attendances SET date_service = $2, start_service = $3, end_service = $4, status = $5, reminder = $6, type_service_id = $7, updated_at = $8 WHERE attendances.id = $1
`

type UpdateAttendanceParams struct {
	ID            uuid.UUID `json:"id"`
	DateService   time.Time `json:"date_service"`
	StartService  time.Time `json:"start_service"`
	EndService    time.Time `json:"end_service"`
	Status        string    `json:"status"`
	Reminder      int32     `json:"reminder"`
	TypeServiceID uuid.UUID `json:"type_service_id"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) UpdateAttendance(ctx context.Context, arg UpdateAttendanceParams) error {
	_, err := q.db.ExecContext(ctx, updateAttendance,
		arg.ID,
		arg.DateService,
		arg.StartService,
		arg.EndService,
		arg.Status,
		arg.Reminder,
		arg.TypeServiceID,
		arg.UpdatedAt,
	)
	return err
}
