// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: bucket.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBucket = `-- name: CreateBucket :exec
INSERT INTO buckets ( ID, description, name, aws_access_key_id, aws_secret_access_key, aws_region, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateBucketParams struct {
	ID                 uuid.UUID `json:"id"`
	Description        string    `json:"description"`
	Name               string    `json:"name"`
	AwsAccessKeyID     string    `json:"aws_access_key_id"`
	AwsSecretAccessKey string    `json:"aws_secret_access_key"`
	AwsRegion          string    `json:"aws_region"`
	CreatedAt          time.Time `json:"created_at"`
	UpdatedAt          time.Time `json:"updated_at"`
}

func (q *Queries) CreateBucket(ctx context.Context, arg CreateBucketParams) error {
	_, err := q.db.ExecContext(ctx, createBucket,
		arg.ID,
		arg.Description,
		arg.Name,
		arg.AwsAccessKeyID,
		arg.AwsSecretAccessKey,
		arg.AwsRegion,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteBucket = `-- name: DeleteBucket :exec
DELETE FROM buckets
WHERE buckets.id = $1
AND NOT EXISTS (
    SELECT 1 FROM owners WHERE bucket_id = $1
)
`

func (q *Queries) DeleteBucket(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBucket, id)
	return err
}

const getBucket = `-- name: GetBucket :one
SELECT id, description, name, aws_access_key_id, aws_secret_access_key, aws_region, created_at, updated_at
FROM buckets
WHERE buckets.id = $1
`

func (q *Queries) GetBucket(ctx context.Context, id uuid.UUID) (Bucket, error) {
	row := q.db.QueryRowContext(ctx, getBucket, id)
	var i Bucket
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Name,
		&i.AwsAccessKeyID,
		&i.AwsSecretAccessKey,
		&i.AwsRegion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBuckets = `-- name: GetBuckets :many
SELECT id, description, name, aws_access_key_id, aws_secret_access_key, aws_region, created_at, updated_at
FROM buckets
`

func (q *Queries) GetBuckets(ctx context.Context) ([]Bucket, error) {
	rows, err := q.db.QueryContext(ctx, getBuckets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bucket
	for rows.Next() {
		var i Bucket
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Name,
			&i.AwsAccessKeyID,
			&i.AwsSecretAccessKey,
			&i.AwsRegion,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBucket = `-- name: UpdateBucket :exec
UPDATE buckets SET description = $2, name = $3, aws_access_key_id = $4, aws_secret_access_key = $5, aws_region = $6, updated_at = $7 WHERE buckets.id = $1
`

type UpdateBucketParams struct {
	ID                 uuid.UUID `json:"id"`
	Description        string    `json:"description"`
	Name               string    `json:"name"`
	AwsAccessKeyID     string    `json:"aws_access_key_id"`
	AwsSecretAccessKey string    `json:"aws_secret_access_key"`
	AwsRegion          string    `json:"aws_region"`
	UpdatedAt          time.Time `json:"updated_at"`
}

func (q *Queries) UpdateBucket(ctx context.Context, arg UpdateBucketParams) error {
	_, err := q.db.ExecContext(ctx, updateBucket,
		arg.ID,
		arg.Description,
		arg.Name,
		arg.AwsAccessKeyID,
		arg.AwsSecretAccessKey,
		arg.AwsRegion,
		arg.UpdatedAt,
	)
	return err
}
