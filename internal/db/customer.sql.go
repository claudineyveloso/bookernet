// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO customers (ID, birthday, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type CreateCustomerParams struct {
	ID        uuid.UUID    `json:"id"`
	Birthday  sql.NullTime `json:"birthday"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer,
		arg.ID,
		arg.Birthday,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT customers.id, birthday, customers.created_at, customers.updated_at, people.id, first_name, last_name, email, phone, cell_phone, personable_id, personable_type, people.created_at, people.updated_at, addresses.id, public_place, complement, neighborhood, city, state, zip_code, addressable_id, addressable_type, addresses.created_at, addresses.updated_at
FROM customers
JOIN people ON customers.id = people.personable_id AND people.personable_type = 'customer'
JOIN addresses ON customers.id = addresses.addressable_id AND addresses.addressable_type = 'customer'
WHERE customers.id = $1
`

type GetCustomerRow struct {
	ID              uuid.UUID      `json:"id"`
	Birthday        sql.NullTime   `json:"birthday"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
	ID_2            uuid.UUID      `json:"id_2"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           string         `json:"email"`
	Phone           sql.NullString `json:"phone"`
	CellPhone       string         `json:"cell_phone"`
	PersonableID    uuid.UUID      `json:"personable_id"`
	PersonableType  string         `json:"personable_type"`
	CreatedAt_2     time.Time      `json:"created_at_2"`
	UpdatedAt_2     time.Time      `json:"updated_at_2"`
	ID_3            uuid.UUID      `json:"id_3"`
	PublicPlace     sql.NullString `json:"public_place"`
	Complement      sql.NullString `json:"complement"`
	Neighborhood    sql.NullString `json:"neighborhood"`
	City            sql.NullString `json:"city"`
	State           sql.NullString `json:"state"`
	ZipCode         sql.NullString `json:"zip_code"`
	AddressableID   uuid.UUID      `json:"addressable_id"`
	AddressableType string         `json:"addressable_type"`
	CreatedAt_3     time.Time      `json:"created_at_3"`
	UpdatedAt_3     time.Time      `json:"updated_at_3"`
}

func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (GetCustomerRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i GetCustomerRow
	err := row.Scan(
		&i.ID,
		&i.Birthday,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CellPhone,
		&i.PersonableID,
		&i.PersonableType,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.ID_3,
		&i.PublicPlace,
		&i.Complement,
		&i.Neighborhood,
		&i.City,
		&i.State,
		&i.ZipCode,
		&i.AddressableID,
		&i.AddressableType,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
	)
	return i, err
}

const getCustomers = `-- name: GetCustomers :many
SELECT customers.id, birthday, customers.created_at, customers.updated_at, people.id, first_name, last_name, email, phone, cell_phone, personable_id, personable_type, people.created_at, people.updated_at, addresses.id, public_place, complement, neighborhood, city, state, zip_code, addressable_id, addressable_type, addresses.created_at, addresses.updated_at
FROM customers
JOIN people ON customers.id = people.personable_id AND people.personable_type = 'customer'
JOIN addresses ON customers.id = addresses.addressable_id AND addresses.addressable_type = 'customer'
`

type GetCustomersRow struct {
	ID              uuid.UUID      `json:"id"`
	Birthday        sql.NullTime   `json:"birthday"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
	ID_2            uuid.UUID      `json:"id_2"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           string         `json:"email"`
	Phone           sql.NullString `json:"phone"`
	CellPhone       string         `json:"cell_phone"`
	PersonableID    uuid.UUID      `json:"personable_id"`
	PersonableType  string         `json:"personable_type"`
	CreatedAt_2     time.Time      `json:"created_at_2"`
	UpdatedAt_2     time.Time      `json:"updated_at_2"`
	ID_3            uuid.UUID      `json:"id_3"`
	PublicPlace     sql.NullString `json:"public_place"`
	Complement      sql.NullString `json:"complement"`
	Neighborhood    sql.NullString `json:"neighborhood"`
	City            sql.NullString `json:"city"`
	State           sql.NullString `json:"state"`
	ZipCode         sql.NullString `json:"zip_code"`
	AddressableID   uuid.UUID      `json:"addressable_id"`
	AddressableType string         `json:"addressable_type"`
	CreatedAt_3     time.Time      `json:"created_at_3"`
	UpdatedAt_3     time.Time      `json:"updated_at_3"`
}

func (q *Queries) GetCustomers(ctx context.Context) ([]GetCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersRow
	for rows.Next() {
		var i GetCustomersRow
		if err := rows.Scan(
			&i.ID,
			&i.Birthday,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.CellPhone,
			&i.PersonableID,
			&i.PersonableType,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ID_3,
			&i.PublicPlace,
			&i.Complement,
			&i.Neighborhood,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.AddressableID,
			&i.AddressableType,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers SET birthday = $2, updated_at = $3 WHERE id = $1
`

type UpdateCustomerParams struct {
	ID        uuid.UUID    `json:"id"`
	Birthday  sql.NullTime `json:"birthday"`
	UpdatedAt time.Time    `json:"updated_at"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer, arg.ID, arg.Birthday, arg.UpdatedAt)
	return err
}
