// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: insurance.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createInsurance = `-- name: CreateInsurance :exec
INSERT INTO insurances ( ID, name, period, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateInsuranceParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Period    string    `json:"period"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateInsurance(ctx context.Context, arg CreateInsuranceParams) error {
	_, err := q.db.ExecContext(ctx, createInsurance,
		arg.ID,
		arg.Name,
		arg.Period,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteInsurance = `-- name: DeleteInsurance :exec
DELETE FROM insurances
WHERE insurances.id = $1
`

func (q *Queries) DeleteInsurance(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteInsurance, id)
	return err
}

const getInsurance = `-- name: GetInsurance :one
SELECT id, name, period, created_at, updated_at
FROM insurances
WHERE insurances.id = $1
`

func (q *Queries) GetInsurance(ctx context.Context, id uuid.UUID) (Insurance, error) {
	row := q.db.QueryRowContext(ctx, getInsurance, id)
	var i Insurance
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Period,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInsuranceByName = `-- name: GetInsuranceByName :one
SELECT id, name, period, created_at, updated_at
FROM insurances
WHERE insurances.name = $1
`

func (q *Queries) GetInsuranceByName(ctx context.Context, name string) (Insurance, error) {
	row := q.db.QueryRowContext(ctx, getInsuranceByName, name)
	var i Insurance
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Period,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInsurances = `-- name: GetInsurances :many
SELECT id, name, period, created_at, updated_at
FROM insurances
`

func (q *Queries) GetInsurances(ctx context.Context) ([]Insurance, error) {
	rows, err := q.db.QueryContext(ctx, getInsurances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Insurance
	for rows.Next() {
		var i Insurance
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Period,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInsurance = `-- name: UpdateInsurance :exec
UPDATE insurances SET name = $2, period = $3, updated_at = $4 WHERE insurances.id = $1
`

type UpdateInsuranceParams struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Period    string    `json:"period"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateInsurance(ctx context.Context, arg UpdateInsuranceParams) error {
	_, err := q.db.ExecContext(ctx, updateInsurance,
		arg.ID,
		arg.Name,
		arg.Period,
		arg.UpdatedAt,
	)
	return err
}
