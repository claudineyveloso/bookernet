// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: interval.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createInterval = `-- name: CreateInterval :exec
INSERT INTO intervals ( ID, owner_id, interval_minutes, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type CreateIntervalParams struct {
	ID              uuid.UUID `json:"id"`
	OwnerID         uuid.UUID `json:"owner_id"`
	IntervalMinutes int32     `json:"interval_minutes"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

func (q *Queries) CreateInterval(ctx context.Context, arg CreateIntervalParams) error {
	_, err := q.db.ExecContext(ctx, createInterval,
		arg.ID,
		arg.OwnerID,
		arg.IntervalMinutes,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteInterval = `-- name: DeleteInterval :exec
DELETE FROM intervals
WHERE intervals.id = $1
AND NOT EXISTS (
    SELECT 1 FROM owners WHERE owner_id = $1
)
`

func (q *Queries) DeleteInterval(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteInterval, id)
	return err
}

const getInterval = `-- name: GetInterval :one
SELECT id, owner_id, interval_minutes, created_at, updated_at
FROM intervals
WHERE intervals.id = $1
`

func (q *Queries) GetInterval(ctx context.Context, id uuid.UUID) (Interval, error) {
	row := q.db.QueryRowContext(ctx, getInterval, id)
	var i Interval
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.IntervalMinutes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIntervals = `-- name: GetIntervals :many
SELECT id, owner_id, interval_minutes, created_at, updated_at
FROM intervals
`

func (q *Queries) GetIntervals(ctx context.Context) ([]Interval, error) {
	rows, err := q.db.QueryContext(ctx, getIntervals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Interval
	for rows.Next() {
		var i Interval
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.IntervalMinutes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInterval = `-- name: UpdateInterval :exec
UPDATE intervals SET owner_id = $2, updated_at = $3 WHERE intervals.id = $1
`

type UpdateIntervalParams struct {
	ID        uuid.UUID `json:"id"`
	OwnerID   uuid.UUID `json:"owner_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateInterval(ctx context.Context, arg UpdateIntervalParams) error {
	_, err := q.db.ExecContext(ctx, updateInterval, arg.ID, arg.OwnerID, arg.UpdatedAt)
	return err
}
